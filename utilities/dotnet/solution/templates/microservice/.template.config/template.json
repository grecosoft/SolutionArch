{
  "$schema": "http://json.schemastore.org/template",
  "author": "NetFusion-Contrib",
  "classifications": [ "NetFusion", "Microservice", "Solution", "Helm", "Terraform" ],
  "identity": "NetFusion.Microservice",  
  "name": "NetFusion Microservice",
  "shortName": "netfusion-microservice",
  "tags": {
    "language": "C#",
    "type":"project"
  },
  "sourceName": "Solution.Context", 
  "preferNameDirectory": true,
  "symbols":{
    "sourceName": {
      "type": "generated",
      "generator": "casing",
      "parameters": {
        "source": "name",
        "toLower": true
      }
    },
    "terraformResourceGroup": {
      "type": "parameter",
      "description": "The name of the Azure resource group containing the Terraform state.",
      "isRequired": true,
      "datatype": "string",
      "replaces": "[nf:terraform-resource-group]"
    },
    "terraformStorageAccount": {
      "type": "parameter",
      "description": "The name of the Azure storage account containing the Terraform state.",
      "isRequired": true,
      "datatype": "string",
      "replaces": "[nf:terraform-storage-account]"
    },
    "solutionName": {
      "type": "parameter",
      "description": "The name of the solution to which the microservice belongs. (example: homelink)",
      "isRequired": true,
      "replaces": "[nf:solution-name]"
    },
    "serviceSame": {
      "type": "parameter",
      "description": "The name of the microservice. (example: monitoring)",
      "isRequired": true,
      "replaces": "[nf:service-name]"
    },
    "port": {
      "type": "parameter",
      "datatype":"int",
      "replaces": "[nf:port]",
      "description": "The port used when running the service. (example: 7200)"
    },
    "devopsType":{
      "type":"parameter",
      "description": "Determines DevOps solution used to build solution.",
      "datatype": "choice",
      "defaultValue":"none",
      "choices": [
        {
          "choice": "github",
          "description": "Github Workflows"
        },
        {
          "choice": "ado",
          "description":"Azure Pipelines"
        },
        {
          "choice":"none",
          "description":"Excludes DevOps related files."
        }
      ]
    },
    "githubAccount": {
      "type": "parameter",
      "description": "The name of the GitHub account containing the repository to restore the shared solution NuGets.",
      "isRequired": "devopsType == github",
      "datatype": "string",
      "replaces": "[nf:github-account]"
    },
    "devOpsOrgName": {
      "type": "parameter",
      "description": "The name of the Azure DevOps organization to which the solution belongs.",
      "isRequired": "devopsType == ado",
      "datatype": "string",
      "replaces": "[nf:devops-organization]"
    },
    "aksResourceGroup": {
      "type": "parameter",
      "description": "The name of the AKS resource group.",
      "datatype": "string",
      "replaces": "[nf:aks-resource-group]"
      },
    "aksName": {
      "type": "parameter",
      "description": "The name of the AKS defined within the resource group.",
      "datatype": "string",
      "replaces": "[nf:aks-name]"
    },
    "acrName": {
      "type": "parameter",
      "description": "The name of the ACR defined within the AKS resource group.",
      "isRequired": "true",
      "datatype": "string",
      "replaces": "[nf:arc-name]"
    },
    "registry": {
      "type": "parameter",
      "datatype": "string",
      "replaces": "[nf:registry]",
      "description": "The registry where the microservice image is stored. (example: aksmsclusteracr.azurecr.io)"
    },
    "chartVersion": {
      "type": "parameter",
      "isRequired": true,
      "datatype": "string",
      "replaces": "[nf:chart-version]",
      "description": "The version of the Microservice Helm Chart used to deploy. (example: 1.0.0)"
    },
    "host": {
      "type": "parameter",
      "isRequired": true,
      "datatype": "string",
      "replaces": "[nf:host]",
      "description": "The host from which the microservice can be accessed. (example:  homelink.com)"
    },
    "useAdo": {
      "type": "computed",
      "value": "(devopsType == ado)"
    },
    "useGitHub": {
      "type": "computed",
      "value": "(devopsType == github)"
    },
    "app-id": {
      "type": "generated",
      "generator": "guid",
      "replaces": "[nf:app-id]",
      "description": "The generated GUID used to identify the Application Service Plugin Component.",
      "parameters": {
        "defaultFormat": "D"
      }
    },
    "domain-id": {
      "type": "generated",
      "generator": "guid",
      "replaces": "[nf:domain-id]",
      "description": "The generated GUID used to identify the Domain Plugin Component.",
      "parameters": {
        "defaultFormat": "D"
      }
    },
    "infra-id": {
      "type": "generated",
      "generator": "guid",
      "replaces": "[nf:infra-id]",
      "description": "The generated GUID used to identify the Infrastructure Plugin Component.",
      "parameters": {
        "defaultFormat": "D"
      }
    },
    "host-id": {
      "type": "generated",
      "generator": "guid",
      "replaces": "[nf:host-id]",
      "description": "The generated GUID used to identify the Host Plugin Component.",
      "parameters": {
        "defaultFormat": "D"
      }
    }
  },
  "sources":[
      {
        "modifiers": [
          {
            "condition": "(devopsType != ado || devopsType == none)",
            "exclude": [
              "templates/**/*"
            ]
          },
          {
            "condition": "(devopsType != github || devopsType == none)",
            "exclude": [
              ".github/**/*"
            ]
          }
        ]
      }
    ]
}
